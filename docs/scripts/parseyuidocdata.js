(function(module) {
  var _ = require('underscore');
  var fs = require('fs');
  var createNamespaceTree = require('./createnamespacetree');
  var isCalledFromCommandLine = (require.main === module);

  var missingItems = [];


  /**
   * Parses view data generated by YUIDoc.
   * Moves all classitems into their class objects.
   * Nests namespaces.
   *
   * Eg:
   *  {
   *    "animals": {
   *      classes: [
   *        {
   *          name: "AnimalInterface",
   *          method: [
   *            { name: 'speak', ... }
   *          ],
   *          property: [
   *            { name: 'color', ... }
   *          ]
   *        }
   *      ],
   *      namespaces: {
   *        birds: {
   *          classes: [...]
   *          namespaces: {...}
   *        },
   *        fish: { ... }
   *      }
   *    }
   *  }
   *
   * Command line usage:
   *  $ node parseyuidocdata.js YUIDocViewData.json parsedDataOutput.json
   *
   * @param {Object} data
   * @returns {Object}
   */
  var parseYuiDocData = function(data) {
    var nsTree, nsTreePublic, classes, classesPublic;

    processClasses(data.classes, data.classitems);
    classesPublic = createPublicApiClasses(data.classes);

    nsTree = createNamespaceTree(_.values(data.classes));
    nsTreePublic = createNamespaceTree(_.values(classesPublic));

    return {
      classes: data.classes,
      namespaces: nsTree,
      publicApi: {
        classes: classesPublic,
        namespaces: nsTreePublic
      },
      missingItems: missingItems
    };
  };


  function processClasses(classes, classItems) {
    addItemsToClasses(classes, classItems);
    addParentRefsToClasses(classes);
    extendClassesWithParentItems(classes);
  }

  function addItemsToClasses(classes, classItems) {
    var typeMap = {
      method: 'methods',
      property: 'properties',
      attribute: 'attributes',
      event: 'events'
    };

    _.each(classItems, function(item) {
      var classObj = classes[item.class];
      var isItemTypeUndefined = !!!item.itemtype;     // For whatever reason, !item.itemType does not work.
      var itemType = isItemTypeUndefined ? 'other': typeMap[item.itemtype];

      if (!classObj) { return; }

      if (isItemTypeUndefined && itemType !== 'properties') {
        missingItems.push(item);
      }

      classObj[itemType] || (classObj[itemType] = []);
      classObj[itemType].push(item);
    });
  }

  function addParentRefsToClasses(classes) {
    var stormReport = classes['aeris.api.model.StormReport'];
    console.log('StormReport: "' + stormReport.extends + '"');
    console.log('PointData: ' + classes['aeris.api.model.PointData']);

    _.each(classes, function(classObj) {
      classObj.parent = classes[classObj.extends];
    });
  }

  function extendClassesWithParentItems(classes) {

  }


  function createPublicApiClasses(classes) {
    var publicClasses = {};

    _.each(classes, function(classObj, className) {
      if (classObj.hasOwnProperty('publicapi')) {
        publicClasses[className] = classObj;
      }
    });

    return publicClasses;
  }



  function getFileFromArg(argIndex, errMsg) {
    if (!process.argv[argIndex]) {
      console.log(errMsg);
      process.exit(1);
    }

    return process.cwd() + '/' + process.argv[argIndex];
  }



  if (isCalledFromCommandLine) {
    var dataFile = getFileFromArg(2, 'Must specify a data file');
    var outFile = getFileFromArg(3, 'Must specify an output file');
    var data = JSON.parse(fs.readFileSync(dataFile, 'utf8'));

    var parsedData = parseYuiDocData(data);

    fs.writeFileSync(outFile, JSON.stringify(parsedData, null, 2));

    console.log('Done!');
    process.exit(0);
  }
  else {
    module.exports = parseYuiDocData;
  }
}(module));